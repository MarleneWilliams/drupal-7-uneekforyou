<?php
/**
 * @file
 * Code for the Commerce Kickstart Search feature.
 */

include_once 'commerce_kickstart_search.features.inc';

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_kickstart_search_entity_property_info_alter(&$info) {
  $properties = &$info['commerce_product']['properties'];
  foreach (field_info_fields() as $field) {
    if ($field['module'] != 'commerce_product_reference') {
      continue;
    }
    $field_name = $field['field_name'];
    foreach ($field['bundles'] as $entity_type => $bundles) {
      $properties[$field_name . '_' . $entity_type] = array(
        'description' => t('A bridge to @entity_type referenced by @field_name', array(
          '@entity_type' => $entity_type,
          '@field_name' => $field_name
        )),
        'getter callback' => 'commerce_kickstart_search_backreference_getter',
        'field' => $field,
        'label' => t('A bridge to @entity_type referenced by @field_name', array(
          '@entity_type' => $entity_type,
          '@field_name' => $field_name
        )),
        'target type' => $entity_type,
        'type' => 'list<' . $entity_type . '>',
      );
    }
  }
}

/**
 * Getter callback for retrieving related entities.
 */
function commerce_kickstart_search_backreference_getter($entity, array $options, $name, $type, $info) {
  $entities_ids = array();
  // Retrieve the field.
  $field = $info['field'];
  $entity_target_type = $info['target type'];
  $entity_wrapper = entity_metadata_wrapper($type, $entity);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_target_type, '=')
    ->fieldCondition($field['field_name'], 'product_id', $entity_wrapper->getIdentifier(), '=');
  $result = $query->execute();
  if (isset($result[$entity_target_type])) {
    $entities_ids = array_keys($result[$entity_target_type]);
  }
  return $entities_ids;
}

/**
 * Implements hook_facetapi_filters().
 */
function commerce_kickstart_search_facetapi_filters() {
  $filters = array(
    'useless_searches' => array(
      'handler' => array(
        'label' => t('Hide items that do not change search result.'),
        'class' => 'CommerceKickstartSameSearch',
      ),
    ),
    'hide_search_start' => array(
      'handler' => array(
        'label' => t('Hide if no search is performed.'),
        'class' => 'CommerceKickstartSearchStart',
      ),
    ),
  );

  return $filters;
}

/**
 * Implements hook_block_info_alter().
 */
function commerce_kickstart_search_block_info_alter(&$blocks, $theme, $code_blocks) {
  // Override facetapi blocks label.
  if (isset($blocks['facetapi']['sEfBkM5gYOzQ0rqCRvhBYUZpHqK1SSNm'])) {
    $blocks['facetapi']['sEfBkM5gYOzQ0rqCRvhBYUZpHqK1SSNm']['title'] = t('Price');
    $blocks['facetapi']['sEfBkM5gYOzQ0rqCRvhBYUZpHqK1SSNm']['weight'] = -1;
  }
  if (isset($blocks['facetapi']['bLnoZinIxE1jGb2PRK60VXpQAiOUVaBT'])) {
    $blocks['facetapi']['bLnoZinIxE1jGb2PRK60VXpQAiOUVaBT']['title'] = t('Shoe size');
  }
  if (isset($blocks['facetapi']['G1C31UEu0CE1nJNBKS8vf340Ze4SYYEt'])) {
    $blocks['facetapi']['G1C31UEu0CE1nJNBKS8vf340Ze4SYYEt']['title'] = t('Hat size');
  }
  if (isset($blocks['facetapi']['0ipnwlXipzrm39vOO6k11dGc0FQlH9sg'])) {
    $blocks['facetapi']['0ipnwlXipzrm39vOO6k11dGc0FQlH9sg']['title'] = t('Top size');
  }
  if (isset($blocks['facetapi']['y7cJ8JiPggb9kLdqx2RyReFZulrBd8Ig'])) {
    $blocks['facetapi']['y7cJ8JiPggb9kLdqx2RyReFZulrBd8Ig']['title'] = t('Bag size');
  }
}
